#+title: doc 
#+PROPERTY: header-args :noweb no-export :comments noweb

* Operation System Prepair 
** windows上的前置配置
1. 安装msys2： [[https://www.msys2.org/]]
2. 修改软件源：
   #+BEGIN_SRC sh
   # /etc/pacman.d/mirrorlist.mingw64
   Server = https://mirrors.ustc.edu.cn/msys2/mingw/x86_64

   # /etc/pacman.d/mirrorlist.mingw32
   Server = https://mirrors.ustc.edu.cn/msys2/mingw/i686

   # /etc/pacman.d/mirrorlist.msys
   Server = https://mirrors.ustc.edu.cn/msys2/msys/$arch
   #+END_SRC
   参考： [[https://chriszheng.science/2017/07/16/Best-practice-of-Emacs-on-MS-Windows/]]
   和 [[https://emacs-china.org/t/topic/2600/16]]
3. 修改git的源，安装windows版本的git:
   在 ~/etc/pacman.conf~ 中， 加入
   #+BEGIN_SRC sh
   [git-for-windows]
   # SigLevel = Optional TrustedOnly
   SigLevel = Never
   Server = https://dl.bintray.com/git-for-windows/pacman/$arch
   #+END_SRC
   原理不明，参考如上。
4. 运行:
   #+BEGIN_SRC sh
   pacman -Syu
   #+END_SRC
   然后重开terminal，再次运行:
   #+BEGIN_SRC sh
   pacman -Su
   #+END_SRC
5. 安装 ~make~:
   #+BEGIN_SRC sh
   pacman -S make
   #+END_SRC
6. 安装openssh（是为了使用ssh）, 并配置目录让ssh能找到key, 即配置windows的环境变量 ~HOME~ 为 你的home(比如 ~c:/msys64/home/name~).
7. 做git相关的配置：
   #+BEGIN_SRC sh
   git config --global user.email name@example.com
   git config --global user.name name
   #+END_SRC
8. 安装Source Code Pro:
   [[https://fonts.google.com/specimen/Source+Code+Pro?selection.family=Source+Code+Pro]]
9. 将caps lock改为ctrl，使用 ~sharpkeys~.
   ~sharpkeys~ 安装地址： [[https://github.com/randyrants/sharpkeys]]
10. 安装emacs:  
    #+BEGIN_SRC sh
    pacman -S mingw-w64-x86_64-emacs
    #+END_SRC
11. 使用 ~ssh-keygen~ 产生key， 然后将 public key 上传到github中。
    接着clone emacs的配置:
    #+BEGIN_SRC sh
    git clone git@github.com:lczch/rice-wine.git
    #+END_SRC
12. 创建 ~.emacs~ 文件并写入：
    #+BEGIN_SRC emacs-lisp
    (load-file "~/rice-wine/init.el")
    #+END_SRC
13. 在 ~.bashrc~ 中设置常用的alias, PATH和一些emacs相关的环境变量:
    #+BEGIN_SRC sh
    # my .bashrc
    if [ -f "$HOME/rice-wine/bash/.bashrc" ] ; then
        echo "Load $HOME/rice-wine/bash/.bahsrc."
        source "$HOME/rice-wine/bash/.bashrc"
    fi
    #+END_SRC

补充资料：[[https://emacs-china.org/t/windows-emacs/7907][Windows 上面 Emacs 简易入门最佳实践]]
** 从msys2延伸出的win上的命令行工具
*** CANCELLED 字符集
    CLOSED: [2020-01-27 Mon 07:44]
    - State "CANCELLED"  from              [2020-01-27 Mon 07:44] \\
      不能这样设, 用了GBK后某些utf-8编码的字符就又乱码了, 得不偿失.
    字符集: 在option中设置为
   - locale: zh_CN 
   - character set: GBK
*** DONE 更好用的终端 
    CLOSED: [2020-01-26 Sun 20:17]
    - State "DONE"       from "CANCELLED"  [2020-01-27 Mon 07:42]
    conemu: [[https://conemu.github.io/]]
    为什么要选这个? 因为有标签页啊. 
    但我看到网上有人提出, 这会导致gcc链接时出错.
    但我的path设置好的. 配置很可读.

    path设置好了. 

    但字符集又出现了问题, 用tree又会显示乱码....
    但是, 使用:
    #+BEGIN_SRC sh
    chcp 54936
    #+END_SRC
    这是Windows更改字符集的指令, 54936这个number代表GB18030, 是一个中文字符集.
    再来回忆一下字符集的内容, 字符集: 编码 -> 字符, 而字符是一套符号的集合, 每个符号有一个相应的序号. 
    字符集之间的差别是符号的多少, 和符号的序号. 
    这是unicode和GBK的差别. 
    UTF8, UTF16, UTF32是编码方案. 
    
    但这一句设定怎么设置成自动启动嗯?
    我是通过.bashrc启动项设定的, 不过要在执行前将chcp.com的位置加入path. 

    做了这一设置后, 反而还有些中文文件名乱码了, 不过没关系.

    通过文档的描述, 我觉得GB18030更普遍, 因为它是国家标准. 

    但这个字符集会导致在终端中无法输入中文, 大概是因为输入法和其他的中文都是utf8的.
    损失太大了, 准备放弃这种修改. 
    
    又出现了一个问题, 当输入pacman -S后紧接一个空格, zsh会提供一些辅助信息, 但此光标适应不良, 乱跑.

    problem: [[https://github.com/Maximus5/ConEmu/issues/1873]]
*** DONE Far: windows file manager 
    CLOSED: [2020-01-27 Mon 07:44]
    - State "DONE"       from              [2020-01-27 Mon 07:44]
    虽然没有ranger在linux下和emacs联系的那么紧密, 但是漂亮啊. 
    虽然是完全另一套快捷键, 但和ConEmu在一起还行. 
  
* TODO 
** CANCELLED 怎样可以把问题表达的更清晰？
   CLOSED: [2020-01-23 Thu 10:01]
见链接：[[https://emacs.stackexchange.com/questions/19355/buffer-local-tangle-in-org-mode][a question about org-mode]]
** CANCELLED How to Summarize a Research Article 
   CLOSED: [2020-01-23 Thu 10:01]
[[http://web2.uconn.edu/ahking/How_to_Summarize_a_Research_Article.pdf]]
[[http://www.columbia.edu/cu/biology/ug/research/paper.html][WRITING A SCIENTIFIC RESEARCH ARTICLE]]

** DONE 我想要一个好用的terminal
   CLOSED: [2020-01-23 Thu 10:01]
   - State "DONE"       from              [2020-01-23 Thu 10:01]
现在配置emacs，不仅要配置emacs的字体啊， ~exec-path~ ，之类的，还要给terminal同样配置一遍，比如 ~PATH~ 啊什么的，很麻烦。

我能不能再emacs中使用terminal提供给我的功能呢？

我现在想到的候选者是eshell，至于emacs中的term，还完全不了解。

*** eshell 
资料： [[http://zhuoqiang.me/torture-emacs.html]]
资料： [[https://www.jianshu.com/p/a47a0bb66d5b][aweshell]]
资料： [[https://emacs-china.org/t/topic/5362]]

#+BEGIN_QUOTE
Back in the days, VT-like terminals were our main mean of communicating with a machine. Decades went by, our desktop computers can now handle gigabytes of buffering and display in 24-bit colors, and yet we still stick terminal emulators, that is, programs that emulate the restrictions of those ancient machines.
#+END_QUOTE

Terminals vs. shells
#+BEGIN_QUOTE
It's important to understand that shells are not (or should not be) semantically bound to terminal emulator restrictions. Shells are a textual interface to the machine. They just need input, evaluation, execution, output.
#+END_QUOTE

*** terminal和shell的区别
** DONE font 
   CLOSED: [2020-01-23 Thu 10:01]
   - State "DONE"       from              [2020-01-23 Thu 10:01]
也许可以试试这个中英文混编字体？
链接： [[https://github.com/GitHubNull/YaHei-Consolas-Hybrid-1.12][YaHei-Consolas-Hybrid-1.12]]
等距更纱黑体也可以试试，据说中英文等高，而且两个英文字符宽度等于一个中文字符。
配置可以见： [[https://emacs-china.org/t/windows-emacs/7907/38]]

暂时不会折腾这个.
** DONE 尝试windows专用的emacs build 
   CLOSED: [2020-01-23 Thu 10:01]
   - State "DONE"       from              [2020-01-23 Thu 10:01]
   https://github.com/m-parashar/emax64
   原版本: 5.118s 
   emax64: 5.137s 
   感觉不出差别. 
** TODO 当package需要更新时 
   今天必须要跟新clojure的配置, 因为原来的配置已经不能用了.
   然后我把原来的包删除之后, 发现cider增加了一大堆依赖, 而这些依赖的包我都必须手动下载, 很麻烦.
   不仅下载麻烦, 我还要在配置中对每个包增添use-package的语句, 用来require他们, 这也是麻烦.
   
   所以, 我想要方便的自动下载包的功能, 特别是那些依赖. 而且, 我现在也不想一个一个手动的require包了. 

   懒猫的git-submodule是一个解决方案. 
   
   我可以写一个从package-manager直接下载一个包, 并放到我想要的位置的函数, 类似于package-install, 但我主要下载, 不要其他乌七八糟的事情. 
   当然, 是把所有的依赖都下载了. 
