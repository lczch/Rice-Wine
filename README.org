#+title: Emacs Stable Configuration
#+PROPERTY: header-args :noweb no-export :comments noweb

* Operation System Prepair 
** windows上的前置配置
1. 安装msys2： [[https://www.msys2.org/]]
2. 修改软件源：
   #+BEGIN_SRC sh
   # /etc/pacman.d/mirrorlist.mingw64
   Server = https://mirrors.ustc.edu.cn/msys2/mingw/x86_64

   # /etc/pacman.d/mirrorlist.mingw32
   Server = https://mirrors.ustc.edu.cn/msys2/mingw/i686

   # /etc/pacman.d/mirrorlist.msys
   Server = https://mirrors.ustc.edu.cn/msys2/msys/$arch
   #+END_SRC
   参考： [[https://chriszheng.science/2017/07/16/Best-practice-of-Emacs-on-MS-Windows/]]
   和 [[https://emacs-china.org/t/topic/2600/16]]
3. 修改git的源，安装windows版本的git:
   在 ~/etc/pacman.conf~ 中， 加入
   #+BEGIN_SRC sh
   [git-for-windows]
   # SigLevel = Optional TrustedOnly
   SigLevel = Never
   Server = https://dl.bintray.com/git-for-windows/pacman/$arch
   #+END_SRC
   原理不明，参考如上。
4. 运行:
   #+BEGIN_SRC sh
   pacman -Syu
   #+END_SRC
   然后重开terminal，再次运行:
   #+BEGIN_SRC sh
   pacman -Su
   #+END_SRC
5. 安装 ~make~:
   #+BEGIN_SRC sh
   pacman -S make
   #+END_SRC
6. 安装openssh（是为了使用ssh）, 并配置目录让ssh能找到key, 即配置windows的环境变量 ~HOME~ 为 ~c:/msys64/home/lzh~.
7. 做git相关的配置：
   #+BEGIN_SRC sh
   git config --global user.email lizhaohui1991@gmail.com
   git config --global user.name lczch
   #+END_SRC
8. 安装Source Code Pro:
   [[https://fonts.google.com/specimen/Source+Code+Pro?selection.family=Source+Code+Pro]]
9. 将caps lock改为ctrl，使用 ~sharpkeys~.
   ~sharpkeys~ 安装地址： [[https://github.com/randyrants/sharpkeys]]
10. 安装emacs:  
    #+BEGIN_SRC sh
    pacman -S mingw-w64-x86_64-emacs
    #+END_SRC
11. 使用 ~ssh-keygen~ 产生key， 然后将 public key 上传到github中。
    接着clone emacs的配置，并执行tangle:
    #+BEGIN_SRC sh
    git clone git@github.com:lczch/rice-wine.git
    cd rice-wine 
    make
    #+END_SRC
12. 创建 ~.emacs~ 文件并写入：
    #+BEGIN_SRC emacs-lisp
    (load-file "~/rice-wine/init.el")
    #+END_SRC
13. 在 ~.bashrc~ 中设置常用的alias, PATH和一些emacs相关的环境变量:
    #+BEGIN_SRC sh
    # my .bashrc
    if [ -f "$HOME/rice-wine/bash/.bashrc" ] ; then
        echo "Load $HOME/rice-wine/bash/.bahsrc."
        source "$HOME/rice-wine/bash/.bashrc"
    fi
    #+END_SRC

补充资料：[[https://emacs-china.org/t/windows-emacs/7907][Windows 上面 Emacs 简易入门最佳实践]]
* Configuration
** ~init.el-main~ 
#+BEGIN_SRC emacs-lisp :tangle "init.el" 
#+END_SRC

** global-variables
#+name: global-variables
#+BEGIN_SRC emacs-lisp
#+END_SRC

** pre-init
#+name: pre-init
#+BEGIN_SRC emacs-lisp 
;; -*- coding: utf-8 -*-




#+END_SRC
** layers
#+name: layers
#+BEGIN_SRC emacs-lisp 
(use-package init-const)

<<evil-escape>>
<<chinese-font>>
<<latex>>
<<eshell>>
<<English>>
#+END_SRC
    
*** latex 
#+name: latex
#+BEGIN_SRC emacs-lisp 
<<latex-main>>
#+END_SRC
**** prepare-for-texlive 
#+name: prepare-for-texlive 
#+BEGIN_SRC emacs-lisp 
#+END_SRC

**** prepare-for-pdf-viewer 

#+name: prepare-for-pdf-viewer
#+BEGIN_SRC emacs-lisp
#+END_SRC

**** latex-functions
这是在做项目时，处理coq代码时使用的，其实不能算是配置的一部分，不应该导出。

#+name: latex-functions
#+BEGIN_SRC emacs-lisp
#+END_SRC

**** latex-main
#+name: latex-main
#+BEGIN_SRC emacs-lisp 
;; auctex
#+END_SRC
*** programming 
#+name: programming 
#+BEGIN_SRC emacs-lisp
#+END_SRC
**** coq 
#+name: coq 
#+BEGIN_SRC emacs-lisp
(defun coq-mode-func ()
  "features needed by coq mode"
  (rice-wine-prog-func)
  (yas-on)
  (company-coq-on)
  (cscope-minor-mode))

(use-package proof-site
  :load-path (lambda ()
               (expand-file-name "PG/generic"
                                 rice-wine-package-dir))
  :mode ("\\.v\\'" . coq-mode)
  :config
  ;; (rw/prepend-to-exec-path (expand-file-name "bin/Coq8.4/bin" "~"))

  (setq
   proof-splash-enable nil
   coq-indent-semicolon-tactical 0
   coq-match-indent 4
   coq-one-command-per-line t
   proof-auto-raise-buffers nil ;; prevent closing the other frame when it only show *goals* and *responds*
   proof-multiple-frames-enable nil ;; this feature is buggy...
   proof-keep-response-history nil
   proof-next-command-insert-space t)

  (defun pg-debug-on ()
    (interactive)
    (setq proof-general-debug t))

  (defun pg-debug-off ()
    (interactive)
    (setq proof-general-debug nil))

  (use-package rw-frame-lib)

  (defun rw/pg-show-goals-and-responds-in-other-frame ()
    "show buffer *goals* and *responds* in other frame.
     1. if there is frame in other monitor exists, then switch to that
        frame, rearrange it to show  *goals* and *responds* horizontally
     2. if there is only one frame, then create one, and
        perform same action as 1"
    (interactive)
    (delete-other-windows) ;; delete auto generate layout
    (let ((cframe (selected-frame))
          (xframe (or (rw-select-frame-in-other-monitor)
                      (make-frame))))
      (select-frame xframe)
      ;; now we in new frame
      (switch-to-buffer "*goals*")
      (delete-other-windows)
      (split-window-horizontally)
      (other-window 1)
      (switch-to-buffer "*response*")
      (other-window 1)
      (select-frame cframe)))

  ;; improve pg's *goals* and *respons* display
  (evil-leader/set-key
    "cl" 'rw/pg-show-goals-and-responds-in-other-frame)

  (use-package company-coq
    :commands (company-coq-mode company-coq-initialize)
    :init
    (defun company-coq-on ()
      (interactive)
      (company-coq-initialize))
    (defun company-coq-off ()
      (interacitve)
      (company-coq-mode 0))

    :config
    (setq company-coq-disabled-features
          '(
            ;; snippets
            outline
            code-folding
            company-defaults
            ;;refman-ltac-abbrevs-backend
            ;;refman-tactic-abbrevs-backend
            ;;refman-vernac-abbrevs-backend
            refman-scope-abbrevs-backend
            pg-backend
            dynamic-symbols-backend
            obsolete-settings))
    (setq company-coq-prettify-symbols-alist
          '(("|-" . 8866)
            ("->" . 8594)
            ("=>" . 8658)
            ("fun" . 955)
            ("forall" . 8704)
            ("exists" . 8707)
            ("/\\" . 8743)
            ("\\/" . 8744)
            ("~" . 172)
            ("+-" . 177)
            (">->" . 8611))))


  (add-hook 'coq-mode-hook 'coq-mode-func)

  (use-package rw-pg-project-file)
  
  (use-package rw-coq-lib
    :config
    (evil-leader/set-key
      "ap" 'lzh/coq-trans)
    ))

#+END_SRC

**** rust 
#+name: rust 
#+BEGIN_SRC emacs-lisp
(rw-straight-use-package 'rust-mode "rust-lang" "lczch")
(rw-straight-use-package 'cargo.el "kwrooijen" "lczch")
;; flycheck下次再配
;; (rw-straight-use-package 'flycheck "flycheck" "lczch")
;; (rw-straight-use-package 'flycheck-rust "flycheck" "lczch")

(use-package rust-mode
  :init 
  (autoload 'rust-mode "rust-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
  :defer t
  :config
  (use-package cargo)

  (defun rust-mode-func ()
    (smartparens-mode 1)
    (rainbow-delimiters-mode 1)
    (cargo-minor-mode 1)
    )
  
  (add-hook 'rust-mode-hook 'rust-mode-func)
  )
#+END_SRC
*** eshell 
#+name: eshell
#+BEGIN_SRC emacs-lisp
#+END_SRC
*** English 
#+name: English
#+BEGIN_SRC emacs-lisp 
<<insert-translated-name>>
#+END_SRC
**** insert-translated-name 
#+name: insert-translated-name
#+BEGIN_SRC emacs-lisp 
#+END_SRC

*** bulk
#+name: bulk
#+BEGIN_SRC emacs-lisp
;;------------------------------------------------------------------------------
;; individual package configuration
;;------------------------------------------------------------------------------
(use-package cygwin-mount
  :config
  (cygwin-mount-activate))

(use-package init-elpa)
(use-package init-locales)
;; configure the appearance of emacs
(use-package init-gui-frame)
(use-package init-fonts)
;; (use-package init-isearch)
(use-package init-minibuff)
(use-package init-windows)


(use-package init-evil)
(use-package init-dired)
(use-package init-ibuffer)


;; (use-package init-ido)



<<yasnippet>>


#+END_SRC

* TODO 
** CANCELLED 怎样可以把问题表达的更清晰？
   CLOSED: [2020-01-23 Thu 10:01]
见链接：[[https://emacs.stackexchange.com/questions/19355/buffer-local-tangle-in-org-mode][a question about org-mode]]
** CANCELLED How to Summarize a Research Article 
   CLOSED: [2020-01-23 Thu 10:01]
[[http://web2.uconn.edu/ahking/How_to_Summarize_a_Research_Article.pdf]]
[[http://www.columbia.edu/cu/biology/ug/research/paper.html][WRITING A SCIENTIFIC RESEARCH ARTICLE]]

** DONE 我想要一个好用的terminal
   CLOSED: [2020-01-23 Thu 10:01]
   - State "DONE"       from              [2020-01-23 Thu 10:01]
现在配置emacs，不仅要配置emacs的字体啊， ~exec-path~ ，之类的，还要给terminal同样配置一遍，比如 ~PATH~ 啊什么的，很麻烦。

我能不能再emacs中使用terminal提供给我的功能呢？

我现在想到的候选者是eshell，至于emacs中的term，还完全不了解。

*** eshell 
资料： [[http://zhuoqiang.me/torture-emacs.html]]
资料： [[https://www.jianshu.com/p/a47a0bb66d5b][aweshell]]
资料： [[https://emacs-china.org/t/topic/5362]]

#+BEGIN_QUOTE
Back in the days, VT-like terminals were our main mean of communicating with a machine. Decades went by, our desktop computers can now handle gigabytes of buffering and display in 24-bit colors, and yet we still stick terminal emulators, that is, programs that emulate the restrictions of those ancient machines.
#+END_QUOTE

Terminals vs. shells
#+BEGIN_QUOTE
It's important to understand that shells are not (or should not be) semantically bound to terminal emulator restrictions. Shells are a textual interface to the machine. They just need input, evaluation, execution, output.
#+END_QUOTE

*** terminal和shell的区别
** DONE font 
   CLOSED: [2020-01-23 Thu 10:01]
   - State "DONE"       from              [2020-01-23 Thu 10:01]
也许可以试试这个中英文混编字体？
链接： [[https://github.com/GitHubNull/YaHei-Consolas-Hybrid-1.12][YaHei-Consolas-Hybrid-1.12]]
等距更纱黑体也可以试试，据说中英文等高，而且两个英文字符宽度等于一个中文字符。
配置可以见： [[https://emacs-china.org/t/windows-emacs/7907/38]]

暂时不会折腾这个.
** DONE 尝试windows专用的emacs build 
   CLOSED: [2020-01-23 Thu 10:01]
   - State "DONE"       from              [2020-01-23 Thu 10:01]
   https://github.com/m-parashar/emax64
   原版本: 5.118s 
   emax64: 5.137s 
   感觉不出差别. 
** TODO 当package需要更新时 
   今天必须要跟新clojure的配置, 因为原来的配置已经不能用了.
   然后我把原来的包删除之后, 发现cider增加了一大堆依赖, 而这些依赖的包我都必须手动下载, 很麻烦.
   不仅下载麻烦, 我还要在配置中对每个包增添use-package的语句, 用来require他们, 这也是麻烦.
   
   所以, 我想要方便的自动下载包的功能, 特别是那些依赖. 而且, 我现在也不想一个一个手动的require包了. 

   懒猫的git-submodule是一个解决方案. 
   
   我可以写一个从package-manager直接下载一个包, 并放到我想要的位置的函数, 类似于package-install, 但我主要下载, 不要其他乌七八糟的事情. 
   当然, 是把所有的依赖都下载了. 
