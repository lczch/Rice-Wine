#+PROPERTY: header-args :noweb yes :comments noweb

* Prologue 
Org-style emacs configuration 

* Configuration
** windows上的前置配置
1. 安装msys2： [[https://www.msys2.org/]]
2. 修改软件源：
   #+BEGIN_SRC sh
   # /etc/pacman.d/mirrorlist.mingw64
   Server = https://mirrors.ustc.edu.cn/msys2/mingw/x86_64

   # /etc/pacman.d/mirrorlist.mingw32
   Server = https://mirrors.ustc.edu.cn/msys2/mingw/i686

   # /etc/pacman.d/mirrorlist.msys
   Server = https://mirrors.ustc.edu.cn/msys2/msys/$arch
   #+END_SRC
   参考： [[https://chriszheng.science/2017/07/16/Best-practice-of-Emacs-on-MS-Windows/]]
   和 [[https://emacs-china.org/t/topic/2600/16]]
3. 修改git的源，安装windows版本的git:
   在 ~/etc/pacman.conf~ 中， 加入
   #+BEGIN_SRC sh
   [git-for-windows]
   # SigLevel = Optional TrustedOnly
   SigLevel = Never
   Server = https://dl.bintray.com/git-for-windows/pacman/$arch
   #+END_SRC
   原理不明，参考如上。
4. 运行:
   #+BEGIN_SRC sh
   pacman -Syu
   #+END_SRC
   然后重开terminal，再次运行:
   #+BEGIN_SRC sh
   pacman -Su
   #+END_SRC
5. 安装 ~make~:
   #+BEGIN_SRC sh
   pacman -S make
   #+END_SRC
6. 安装openssh（是为了使用ssh）, 并配置目录让ssh能找到key:
   在 ~c:/msys64/etc/fstab~ 中，写入：
   #+BEGIN_SRC sh
   C:/cygwin64/home/lzh /home/lzh ntfs noacl,binary,posix=1,user 0 0
   #+END_SRC
   意思是将前者挂载到后者。
   这应该是因为 ~git~ 只认 ~msys64~ 的环境变量。
7. 做git相关的配置：
   #+BEGIN_SRC sh
   git config --global user.email lizhaohui1991@gmail.com
   git config --global user.name lczch
   #+END_SRC
8. 安装Source Code Pro:
   [[https://fonts.google.com/specimen/Source+Code+Pro?selection.family=Source+Code+Pro]]
9. 将caps lock改为ctrl，使用 ~sharpkeys~.
   ~sharpkeys~ 安装地址： [[https://github.com/randyrants/sharpkeys]]
10. 安装emacs:  
    #+BEGIN_SRC sh
    pacman -S mingw-w64-x86_64-emacs
    #+END_SRC
11. 使用 ~ssh-keygen~ 产生key， 然后将 public key 上传到github中。
    接着clone emacs的配置，并执行tangle:
    #+BEGIN_SRC sh
    git clone git@github.com:lczch/rice-wine.git
    cd rice-wine 
    make
    #+END_SRC
12. 创建 ~.emacs~ 文件并写入：
    #+BEGIN_SRC emacs-lisp
    (load-file "~/rice-wine/init.el")
    #+END_SRC
   
补充资料：[[https://emacs-china.org/t/windows-emacs/7907][Windows 上面 Emacs 简易入门最佳实践]]
** 配置的主文件： ~init.el~ 
#+BEGIN_SRC emacs-lisp :tangle "init.el" 
<<prologue>>

<<misc>>

<<epilogue>>
#+END_SRC

** prologue
#+name: prologue
#+BEGIN_SRC emacs-lisp :noweb yes 
;; -*- coding: utf-8 -*-
(defconst emacs-start-time (current-time))

(defun print-load-path ()
  "print load-path to *message*, for debugging"
  (interactive)
  (dolist (elt load-path)
    (princ (format "%s\n" elt))))

(unless noninteractive
  (message "Loading %s..." load-file-name))

(setq message-log-max 16384)

;; five times of default value
(defvar best-gc-cons-threshold 4000000 "Best default gc threshold value. Should't be too big.")
(setq gc-cons-threshold best-gc-cons-threshold)
;;------------------------------------------------------------------------------
;; prepare work: set working directory and load-path
;;------------------------------------------------------------------------------

;; Disable auto-load of packages. I prefer requiring them manually.
;; use pacakge `straight` instead 
(setq package-enable-at-startup nil)

<<base-lib>>

(defun rw-add-to-load-path (dir)
  "add DIR to the head of load-path"
  (interactive "DDir:")
  (add-to-list 'load-path dir))

(defun rw-add-subdirs-to-load-path (dir)
  "add all subdirs of DIR to load-path, which begin with a digital or letter."
  (let ((dir-files (directory-files dir t "^[0-9A-Za-z].*")))
    (dolist (file dir-files)
      (when (file-directory-p file)
        (rw-add-to-load-path file)))))

(defun rw-add-dir-and-subdirs-to-load-path (dir)
  "add DIR and all subdirs of DIR to load-path, which begin with a digital or letter."
  (interactive "DDir:")
  (rw-add-to-load-path dir)
  (rw-add-subdirs-to-load-path dir))

;; add needed dirs to load-path
(defvar rice-wine-dir (file-name-directory load-file-name)
  "top directory of configuration")

;; 修改emacs默认的directory到自定义的目录
(setq user-emacs-directory rice-wine-dir)

(defvar rice-wine-lisp-dir (expand-file-name "lisp" rice-wine-dir)
  "configurations of packages")

(defvar rice-wine-package-dir
  (expand-file-name "site-lisp" rice-wine-dir)
  "local packages")

(defvar rice-wine-git-package-dir
  (expand-file-name "git-lisp" rice-wine-dir)
  "packages from git, which have higher priority than pakages in `rice-wine-package-dir'")

(defvar rice-wine-lib-dir
  (expand-file-name "lib" rice-wine-dir)
  "library packages, mostly for emacs-lisp programming")

;; (defvar rice-wine-app-dir
;;   (expand-file-name "app" rice-wine-dir)
;;   "Some apps writing in emacs-lisp.")

(defun rw-add-all-packages-to-load-path ()
  "Add directories in `rice-wine-lib-dir', `rice-wine-git-package-dir' and `rice-wine-package-dir' in `load-path', in which they have the same order."
  (interactive)
  (let ((dirs (list
               rice-wine-package-dir
               rice-wine-git-package-dir
               rice-wine-lib-dir)))
    (mapc #'rw-add-dir-and-subdirs-to-load-path dirs)))

(defun rw-configure-load-path ()
  "Configuring load path for rice-wine emacs"
  (interactive)
  ;; top dir
  
  ;; (rw-add-to-load-path rice-wine-dir)
  ;; package configuration dir
  (rw-add-dir-and-subdirs-to-load-path rice-wine-lisp-dir)
  ;; package dir
  (rw-add-all-packages-to-load-path)
  )

(rw-configure-load-path)

;; (print-load-path)

;;------------------------------------------------------------------------------
;; use-package: wonderful organization tool of emacs configuration 
;;------------------------------------------------------------------------------
(eval-and-compile
  (require 'cl)
  (defvar use-package-verbose nil) ;; debug message
  (require 'use-package))

(require 'diminish)                ;; if you use :diminish
(require 'bind-key)                ;; if you use any :bind variant

;;------------------------------------------------------------------------------
;; useful lib
;;------------------------------------------------------------------------------
(use-package cl)
(use-package cl-lib)

(use-package dash
  :config
  (dash-enable-font-lock))

(use-package s)
(use-package f)

(use-package other-lib)
(use-package rw-frame-lib)
(use-package rw-buffer-lib)
(use-package rw-file-lib)
(use-package rw-misc-lib)


;;------------------------------------------------------------------------------
;; start server: if a emacs starts with server, it must be the main emacs!
;;------------------------------------------------------------------------------
(defvar rw-main-emacs-p nil
  "Whether this emacs is the main emacs?")

;; (use-package server
;;   :config
;;   (unless (server-running-p)
;;     (server-start)
;;     (setq rw-main-emacs-p t)
;;     (message "rw: success start server!")))

;; global key bindings
(use-package evil-leader
  :config
  (global-evil-leader-mode)
  (setq evil-leader/leader ","))


#+END_SRC

*** base-lib 
抄自以下文章，问好看起见，改了个名字。

参考资料： [[https://blog.csdn.net/fenxian2011/article/details/19254949]]

#+name: base-lib 
#+BEGIN_SRC emacs-lisp 
(defun rw/prepend-to-exec-path (path)  
  "push the path to the emacs internal `exec-path' and \"PATH\" env variable.  
Return the updated `exec-path'"  
  (setenv "PATH" (concat (expand-file-name path)  
                         path-separator  
                         (getenv "PATH")))  
  (setq exec-path  
        (cons (expand-file-name path)  
              exec-path)))
#+END_SRC

** misc
#+name: misc
#+BEGIN_SRC emacs-lisp :noweb yes
<<straight>>
<<yasnippet>>
<<bulk>> 
<<evil-escape>>
<<chinese-font>>
<<programming>>
<<latex>>
<<eshell>>
#+END_SRC
*** straight 
#+name: straight
#+BEGIN_SRC emacs-lisp 
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; straight默认自动build的功能是我不需要的，我其实只需要它的下载功能
(defvar rw-straight-repos-dir (expand-file-name "straight/repos" rice-wine-dir))


#+END_SRC
*** yasnippet 
#+name: yasnippet 
#+BEGIN_SRC emacs-lisp 
(straight-use-package
 '(yasnippet-snippets :type git :host github :repo "AndreaCrotti/yasnippet-snippets"
                      :no-build t
                      :fork (:host github
                                   :repo "lczch/yasnippet-snippets")
                      ))

(setq andrea-snippets-dir (expand-file-name "yasnippet-snippets/snippets" rw-straight-repos-dir))

(use-package yasnippet
  :commands (yas-on yas-off)
  :config
  (let* ((rice-wine-yas-dir (expand-file-name "snippets" rice-wine-dir))
         ;; (yas-official-dir (expand-file-name "standard-snippets" rice-wine-yas-dir))
         )
    (setq yas-snippet-dirs
          `(,rice-wine-yas-dir
            ,andrea-snippets-dir
            ;; ,yas-official-dir
            )))

  (yas-reload-all)

  (defun yas-on ()
    (interactive)
    (yas-minor-mode 1))
  
  (defun yas-off ()
    (interactive)
    (yas-minor-mode 0))
  )


;; (define-key evil-insert-state-map (kbd "M-j") 'yas-expand)
;; (define-key evil-emacs-state-map (kbd "M-j") 'yas-expand)


#+END_SRC

*** bulk
#+name: bulk
#+BEGIN_SRC emacs-lisp
;;------------------------------------------------------------------------------
;; individual package configuration
;;------------------------------------------------------------------------------
(use-package cygwin-mount
  :config
  (cygwin-mount-activate))

(use-package init-elpa)
(use-package init-locales)
;; configure the appearance of emacs
(use-package init-gui-frame)
(use-package init-fonts)
(use-package init-isearch)
(use-package init-minibuff)
(use-package init-windows)


(use-package init-evil)
(use-package init-dired)
(use-package init-ibuffer)


(use-package init-ido)
(use-package init-company)
(use-package org
  :init
  ;; (rw-add-to-load-path (expand-file-name "org-mode/lisp" rice-wine-git-package-dir))
  ;; (rw-add-to-load-path (expand-file-name "org-mode/contrib/lisp" rice-wine-git-package-dir))
  :mode (("\\.org\\'" . org-mode))
  :commands (org-mode)
  :config
  (use-package init-org)
  (evil-leader/set-key
    "oo" 'org-babel-tangle)
  )


<<yasnippet>>

;; Nicer naming of buffers for files with identical names
(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'reverse)
  (setq uniquify-separator " • ")
  (setq uniquify-after-kill-buffer-p t)
  (setq uniquify-ignore-buffers-re "^\\*"))

(use-package init-info-mode
  :mode (("\\.info\\'" . info-mode)))

(use-package visual-regexp
  :commands (vr/query-replace)
  :init 
  (evil-leader/set-key
    "rr" 'vr/query-replace
    ;; "vm" 'vr/mc-mark
    ))

;; expand-region: increase selected region by semantic units
(use-package expand-region
  :config
  (evil-leader/set-key
    "xx" 'er/expand-region)
  
  (setq expand-region-contract-fast-key "z")
  (define-key evil-visual-state-map (kbd "v") 'er/expand-region)
  )

;; save place
(use-package saveplace
  :config
  (setq-default save-place t))

;; Highlight the cursor whenever the window scrolls
;; beacon: need package "seq"
(use-package beacon
  :config
  (beacon-mode 1))

(use-package browse-kill-ring
  :config
  ;; no duplicates
  (setq browse-kill-ring-display-duplicates nil)
  ;; preview is annoying
  (setq browse-kill-ring-show-preview nil)
  (browse-kill-ring-default-keybindings)
  (define-key evil-normal-state-map (kbd "M-y") 'browse-kill-ring)
  ;; hotkeys:
  ;; n/p => next/previous
  ;; s/r => search
  ;; l => filter with regex
  ;; g => update/refresh
  )

;; TODO: may switch to gtags?
(use-package init-xcscope)

(use-package init-clipboard)

(use-package which-key
  :config
  (which-key-mode 1))

;; TODO: I use this seldom.
(use-package init-emacs-w3m)

;; TODO: I use this seldom.
(use-package init-profiler)

;;------------------------------------------------------------------------------
;; about programming
;;------------------------------------------------------------------------------
(use-package init-markdown)

(use-package init-haskell-mode)

;; (use-package tex-mode
;;   :init
;;   (add-hook 'latex-mode-hook 'smartparens-mode)
;;   (add-hook 'latex-mode-hook 'rainbow-delimiters-mode))

;;------------------------------------------------------------------------------
;; misc configurations
;;------------------------------------------------------------------------------
;; debug on
(global-set-key (kbd "<f12>") 'toggle-debug-on-error)

(evil-leader/set-key
  "xh" 'mark-whole-buffer
  "do" 'rw-display-current-buffer-other-frame
  "eb" 'eval-buffer
  "rb" 'revert-buffer) 

(fset 'yes-or-no-p 'y-or-n-p)
(setq history-delete-duplicates t)

;; some basic preferences
(setq-default buffers-menu-max-size 30
              case-fold-search t
              save-interprogram-paste-before-kill t
              indent-tabs-mode nil
              mouse-yank-at-point t
              tooltip-delay 1.5
              truncate-lines nil
              truncate-partial-width-windows nil
              ;; visible-bell has some issue
              ;; @see https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/issues/9#issuecomment-97848938
              visible-bell nil)

;; custom-file and backup-directory
(setq auto-save-interval 50)
(let ((my-custom-file (expand-file-name "custom.el" rice-wine-dir))
      (my-backup-dir (expand-file-name "backups" rice-wine-dir)))
  (setq custom-file my-custom-file)
  (setq backup-directory-alist `(("." . ,my-backup-dir))))

;; about Semantic
(setq semanticdb-default-save-directory nil)

;; (global-set-key (kbd "<f5>")
;;                 #'(lambda ()
;;                     (interactive)
;;                     (semantic-grammar-create-package)
;;                     (eval-buffer)))

;; (global-set-key (kbd "<f6>")
;;                 #'(lambda ()
;;                     (interactive)
;;                     (revert-buffer nil t)
;;                     (bovinate)))

;;------------------------------------------------------------------------------
;; restore desktop
;;------------------------------------------------------------------------------
;; (when rw-main-emacs-p
;;   (use-package init-desktop))

;;------------------------------------------------------------------------------
;; printer: we need to install "xpp" through os package manager
;;------------------------------------------------------------------------------
(setq lpr-command "xpp")

#+END_SRC

*** evil-escape 
#+name: evil-escape
#+BEGIN_SRC emacs-lisp
(straight-use-package
 '(evil-escape :type git :host github :repo "syl20bnr/evil-escape"
               :no-build t
               :fork (:host github
                            :repo "lczch/evil-escape")
            ))

(rw-add-to-load-path (expand-file-name "evil-escape" rw-straight-repos-dir))

(use-package evil-escape
  :config 
  ;; {{ https://github.com/syl20bnr/evil-escape
  (setq-default evil-escape-delay 0.3)
  (setq evil-escape-excluded-major-modes '(dired-mode))
  (setq-default evil-escape-key-sequence "kj")
  ;; disable evil-escape when input method is on
  (evil-escape-mode 1)
  ;; }}
  )
#+END_SRC
*** chinese-font
能自动在系统中寻找能用的中文字体。

找到中文字体很重要，因为在windows下，如果没有合适的字体，emacs会变得无法忍受的慢！

代码还没看。

参考资料：[[http://zhuoqiang.me/torture-emacs.html]]

#+name: chinese-font
#+BEGIN_SRC emacs-lisp
(defun qiang-font-existsp (font)
  (if (null (x-list-fonts font))
      nil
    t))

(defvar font-list '("Microsoft Yahei" "文泉驿等宽微米黑" "黑体" "新宋体" "宋体"))

(require 'cl) ;; find-if is in common list package
(find-if #'qiang-font-existsp font-list)

(defun qiang-make-font-string (font-name font-size)
  (if (and (stringp font-size)
           (equal ":" (string (elt font-size 0))))
      (format "%s%s" font-name font-size)
    (format "%s %s" font-name font-size)))

(defun qiang-set-font (english-fonts
                       english-font-size
                       chinese-fonts
                       &optional chinese-font-size)

  "english-font-size could be set to \":pixelsize=18\" or a integer.
If set/leave chinese-font-size to nil, it will follow english-font-size"
  (require 'cl) ; for find if
  (let ((en-font (qiang-make-font-string
                  (find-if #'qiang-font-existsp english-fonts)
                  english-font-size))
        (zh-font (font-spec :family (find-if #'qiang-font-existsp chinese-fonts)
                            :size chinese-font-size)))

    ;; Set the default English font
    ;;
    ;; The following 2 method cannot make the font settig work in new frames.
    ;; (set-default-font "Consolas:pixelsize=18")
    ;; (add-to-list 'default-frame-alist '(font . "Consolas:pixelsize=18"))
    ;; We have to use set-face-attribute
    (message "Set English Font to %s" en-font)
    (set-face-attribute 'default nil :font en-font)

    ;; Set Chinese font
    ;; Do not use 'unicode charset, it will cause the English font setting invalid
    (message "Set Chinese Font to %s" zh-font)
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font)
                        charset zh-font))))
(when (display-graphic-p)
  (qiang-set-font
   '("Consolas" "Monaco" "DejaVu Sans Mono" "Monospace" "Courier New") ":pixelsize=18"
   '("Microsoft Yahei" "文泉驿等宽微米黑" "黑体" "新宋体" "宋体")))

(set-language-info
     "UTF-8"
     'coding-priority
     '(utf-8 gb18030 gbk gb2312 iso-2022-cn chinese-big5 chinese-iso-8bit iso-8859-1))
    (prefer-coding-system 'cp950)
    (prefer-coding-system 'gb2312)
    (prefer-coding-system 'cp936)
    (prefer-coding-system 'gb18030)
    (prefer-coding-system 'utf-16)
    (prefer-coding-system 'utf-8-dos)
    (prefer-coding-system 'utf-8-unix)
    (prefer-coding-system 'utf-8)

    (setq file-name-coding-system 'gb18030)
#+END_SRC
*** latex 
#+name: latex
#+BEGIN_SRC emacs-lisp 
<<latex-main>>
#+END_SRC
**** prepare-for-texlive 
将texlive tools的目录加入variable ~exec-path~ 和环境变量 ~PATH~ 中。
参考资料： [[https://blog.csdn.net/fenxian2011/article/details/19254949]]
#+name: prepare-for-texlive 
#+BEGIN_SRC emacs-lisp 
(rw/prepend-to-exec-path "C:\\texlive\\2018\\bin\\win32")
#+END_SRC

**** prepare-for-pdf-viewer 
配置用于打开pdf的软件， 这里选择SumatraPDF， 并且可以配置双击pdf会用emacs打开对应的latex代码， 很酷。

其中对于反向打开emacs中命令行的参数还不是很理解。

参考资料： [[http://juanjose.garciaripoll.com/blog/latex-with-emacs-on-windows]]

#+name: prepare-for-pdf-viewer
#+BEGIN_SRC emacs-lisp
(setq TeX-PDF-mode t) 

(setq TeX-source-correlate-mode t) 

(setq TeX-source-correlate-method 'synctex) 

(setq TeX-view-program-list 
      '(("Sumatra PDF" ("\"C:/Program Files/SumatraPDF/SumatraPDF.exe\" -reuse-instance" (mode-io-correlate " -forward-search %b %n ") " %o")))) 

(setq TeX-view-program-selection 
      '(((output-dvi style-pstricks) 
         "dvips and start") 
        (output-dvi "Yap") 
        (output-pdf "Sumatra PDF") 
        (output-html "start"))) 


(defun pdf-viewer-config ()
  (visual-line-mode +1)
  (assq-delete-all 'output-pdf TeX-view-program-selection)
  (add-to-list 'TeX-view-program-selection '(output-pdf "Sumatra PDF")))

(add-hook 'LaTeX-mode-hook 'pdf-viewer-config)
#+END_SRC

**** latex-functions
这是在做项目时，处理coq代码时使用的，其实不能算是配置的一部分，不应该导出。

#+name: latex-functions
#+BEGIN_SRC emacs-lisp
(defvar rw/latex-newcommand-regexp nil
  "Regexp for `\\newcommand' in latex mode.")
(setq rw/latex-newcommand-regexp "^[\\]newcommand.*")

(defun rw-latex-cut-all-newcommands ()
  "Cut all `\\newcommand' in the current buffer, and store them on the paste board."
  (interactive)
  (let ((init-p (point))
        (s nil))
    (goto-char (point-max))
    (while (re-search-backward rw/latex-newcommand-regexp nil t nil)
      (setq s (cons (delete-and-extract-region
                     (line-beginning-position)
                     (+ (line-end-position) 1))
                    s)))
    (goto-char init-p)
    (if (not (null s))
        (kill-new (-reduce (lambda (s1 s2) (concat s1 s2))
                           s))
      (error "No command to cut!"))
    ))

;; \newcommand{\SplitNewBlock}[1]{\ensuremath{\mathsf{SplitNewBlock}(#1)}}

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun rw-latex-find-rref ()
  (re-search-forward "rref{\\(?2:[^[:blank:]]*\\)}") ;; the number "2" is the manually name
  (princ (match-string 2)))

(defun rw-latex-find-equation (enumber)
  (interactive "s")
  (re-search-backward (concat "llabel{" (regexp-quote enumber) "}")) ;; must using `regexp-quote'!
  (forward-line)
  (goto-char  (line-beginning-position))
  (re-search-forward "^[[:blank:]]*\\(?1:.*\\)[[:blank:]]*[\\]*[[:blank:]]*")
  (princ (match-string 1))
  )

(defun rw-latex-find-and-insert-equation ()
  (interactive)
  (let* ((enumber (rw-latex-find-rref))
         (p (point))
         (eqs (rw-latex-find-equation enumber)))
    (goto-char p)
    (if (and (not (string-match "begin" eqs))
             (not (looking-at ":")))
        (insert ":\\(" eqs "\\)"))
    (forward-char)
    ))
)
#+END_SRC

**** latex-main
#+name: latex-main
#+BEGIN_SRC emacs-lisp 
;; auctex
(use-package tex-site
  ;; 不知道出了什么问题, 导致下面这一行用不了. 这次配置出现的问题都是功能的封装不好, 每次都要回忆起最细节的东西, 很伤.
  ;; :mode ("\\.tex\\'" . Tex-latex-mode)
  :config
  <<prepare-for-texlive>>

  
  (use-package preview-latex)

  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)

  (use-package company-auctex)
  (use-package reftex)
  
  (defun tex-company ()
    ;; `company-math-symbols-unicode' is used to enter unicode symbols, which in not useful in latex mode. 
    (setup-company-mode '((company-math-symbols-latex
                           ;; company-math-symbols-unicode
                           company-auctex-macros
                           company-auctex-symbols
                           company-auctex-environments
                           company-dabbrev)
                          ;; company-auctex-labels
                          ;; company-auctex-bibs
                          ))
    ;; (company-auctex-init)
    )

  (defun tex-func ()
    (rainbow-delimiters-mode)
    (smartparens-strict-mode)
    (yas-on)
    (tex-company)
    (LaTeX-math-mode)
    (reftex-mode)
    ;; (setq TeX-command-default "LaTeX")
    ;; (local-set-key (kbd "C-c C-a"))
    )

  (add-hook 'LaTeX-mode-hook 'tex-func)
  ;; (add-hook 'TeX-mode-hook 'tex-func)
  ;; (add-hook 'plain-tex-mode-hook)

  <<prepare-for-pdf-viewer>>

  <<latex-functions>>
#+END_SRC
*** programming 
#+name: programming 
#+BEGIN_SRC emacs-lisp
;; I always want return to perform newline automaticly
(define-key global-map (kbd "RET") 'newline-and-indent)

;; rainbow-delimiters
(use-package rainbow-delimiters
  :commands (rainbow-delimiters-mode)
  :config
  ;; (define-globalized-minor-mode rainbow-delimiters-global-mode
  ;;   rainbow-delimiters-mode
  ;;   rainbow-delimiters-mode)
  ;; (rainbow-delimiters-global-mode)
  ;; active rainbow-delimiters minor mode globally 
  )

;; fic-mode: highlight TODO/FIXME/BUG in comment
(use-package fic-mode
  :commands fic-mode)

;; subword-mode: "camelCase" is two word
;; superwode-mode: "camelCase" is a whole word
(use-package subword-mode
  :commands subword-mode)

;; show trailing whitspace
(defun trailing-whitspace-on ()
  (setq show-trailing-whitespace t))
(defun trailing-whitspace-off ()
  (setq show-trailing-whitespace nil))

;; eldoc mode make coq-mode extensive low !!!!!!!
(use-package eldoc
  :commands (eldoc-mode)
  :config
  (setq eldoc-idle-delay 0.2)
  (setq eldoc-echo-area-use-multiline-p t))

;; smartparens
(use-package smartparens
  ;; :init
  ;; (add-hook 'minibuffer-setup-hook 'turn-on-smartparens-strict-mode)
  :commands (smartparens-mode smartparens-strict-mode turn-on-smartparens-strict-mode)
  :config
  (require 'smartparens-config)

  (setq sp-autoskip-closing-pair 'always)
  (sp-use-smartparens-bindings)

  (sp-with-modes 'tuareg-mode
    ;; disable auto insert of "'" 
    (sp-local-pair "'" nil :actions nil)
    (sp-local-pair "`" nil :actions nil))

  (sp-with-modes 'minibuffer-inactive-mode
    (sp-local-pair "'" nil :actions nil))
  )


;;------------------------------------------------------------------------------
;; common features shared by all programming language
;;------------------------------------------------------------------------------
(defun rice-wine-prog-func ()
  "common features of all programming mode"
  (rainbow-delimiters-mode)
  (fic-mode)
  (smartparens-mode)
  ;; (cscope-minor-mode)
  )

;;------------------------------------------------------------------------------
;; lisp: all languages belong to lisp or scheme
;;------------------------------------------------------------------------------
(use-package init-lisp)

;;------------------------------------------------------------------------------
;; coq
;;------------------------------------------------------------------------------
<<coq>>
;;------------------------------------------------------------------------------
;; ruby
;;------------------------------------------------------------------------------
(use-package init-ruby)

;;------------------------------------------------------------------------------
;; c
;;------------------------------------------------------------------------------
(use-package init-cc-mode)

;;------------------------------------------------------------------------------
;; sh
;;------------------------------------------------------------------------------
(use-package init-sh-mode)

;;------------------------------------------------------------------------------
;; asm (for sparc)
;;------------------------------------------------------------------------------
(use-package asm-mode
  :mode (("\\.S'" . asm-mode))
  :commands (asm-mode)
  :config
  ;; for sparc asm, which I always use
  (setq asm-comment-char ?\!)

  (defun asm-mode-func ()
    )

  (add-hook 'asm-mode-hook 'asm-mode-func)
  )

;;------------------------------------------------------------------------------
;; ocaml
;;------------------------------------------------------------------------------
;; (use-package init-ocaml)

#+END_SRC
**** coq 
#+name: coq 
#+BEGIN_SRC emacs-lisp
(defun coq-mode-func ()
  "features needed by coq mode"
  (rice-wine-prog-func)
  (yas-on)
  (company-coq-on)
  (cscope-minor-mode))

(use-package proof-site
  :load-path (lambda ()
               (expand-file-name "PG/generic"
                                 rice-wine-package-dir))
  :mode ("\\.v\\'" . coq-mode)
  :config
  (rw/prepend-to-exec-path (expand-file-name "bin/Coq8.4/bin" "~"))

  (setq
   proof-splash-enable nil
   coq-indent-semicolon-tactical 0
   coq-match-indent 4
   coq-one-command-per-line t
   proof-auto-raise-buffers nil ;; prevent closing the other frame when it only show *goals* and *responds*
   proof-multiple-frames-enable nil ;; this feature is buggy...
   proof-keep-response-history nil
   proof-next-command-insert-space t)

  (defun pg-debug-on ()
    (interactive)
    (setq proof-general-debug t))

  (defun pg-debug-off ()
    (interactive)
    (setq proof-general-debug nil))

  (use-package rw-frame-lib)

  (defun rw/pg-show-goals-and-responds-in-other-frame ()
    "show buffer *goals* and *responds* in other frame.
     1. if there is frame in other monitor exists, then switch to that
        frame, rearrange it to show  *goals* and *responds* horizontally
     2. if there is only one frame, then create one, and
        perform same action as 1"
    (interactive)
    (delete-other-windows) ;; delete auto generate layout
    (let ((cframe (selected-frame))
          (xframe (or (rw-select-frame-in-other-monitor)
                      (make-frame))))
      (select-frame xframe)
      ;; now we in new frame
      (switch-to-buffer "*goals*")
      (delete-other-windows)
      (split-window-horizontally)
      (other-window 1)
      (switch-to-buffer "*response*")
      (other-window 1)
      (select-frame cframe)))

  ;; improve pg's *goals* and *respons* display
  (evil-leader/set-key
    "cl" 'rw/pg-show-goals-and-responds-in-other-frame)

  (use-package company-coq
    :commands (company-coq-mode company-coq-initialize)
    :init
    (defun company-coq-on ()
      (interactive)
      (company-coq-initialize))
    (defun company-coq-off ()
      (interacitve)
      (company-coq-mode 0))

    :config
    (setq company-coq-disabled-features
          '(
            ;; snippets
            outline
            code-folding
            company-defaults
            ;;refman-ltac-abbrevs-backend
            ;;refman-tactic-abbrevs-backend
            ;;refman-vernac-abbrevs-backend
            refman-scope-abbrevs-backend
            pg-backend
            dynamic-symbols-backend
            obsolete-settings))
    (setq company-coq-prettify-symbols-alist
          '(("|-" . 8866)
            ("->" . 8594)
            ("=>" . 8658)
            ("fun" . 955)
            ("forall" . 8704)
            ("exists" . 8707)
            ("/\\" . 8743)
            ("\\/" . 8744)
            ("~" . 172)
            ("+-" . 177)
            (">->" . 8611))))


  (add-hook 'coq-mode-hook 'coq-mode-func)

  (use-package rw-pg-project-file)
  
  (use-package rw-coq-lib
    :config
    (evil-leader/set-key
      "ap" 'lzh/coq-trans)
    ))

#+END_SRC

*** eshell 
#+name: eshell
#+BEGIN_SRC emacs-lisp
(straight-use-package
 '(aweshell :type git :host github :repo "manateelazycat/aweshell"
            :no-build t
            :fork (:host github
                         :repo "lczch/aweshell")
            ))

(rw-add-to-load-path (expand-file-name "aweshell" rw-straight-repos-dir))

(use-package aweshell
  :init
  (autoload 'aweshell-new "aweshell" "Awesome Eshell" t nil)

  ;; 定义快捷键F1是召唤出shell, F5是创建一个shell
  (global-set-key (kbd "<f5>") 'aweshell-new)
  :defer t 
  :config
  (global-set-key (kbd "<f1>") 'aweshell-toggle)

  ;; (define-key eshell-mode-map (kbd "M-p") 'aweshell-prev)
  ;; (define-key eshell-mode-map (kbd "M-n") 'aweshell-next)
  (defalias 'ec 'find-file-other-frame)
  )
#+END_SRC
** epilogue
#+name: epilogue
#+BEGIN_SRC emacs-lisp 
;;------------------------------------------------------------------------------
;; Post initialization
;;------------------------------------------------------------------------------
(when window-system
  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loading %s...done (%.3fs)" load-file-name elapsed))

  (add-hook 'after-init-hook
            `(lambda ()
               (let ((elapsed (float-time (time-subtract (current-time)
                                                         emacs-start-time))))
                 (message "Loading %s...done (%.3fs) [after-init]"
                          ,load-file-name elapsed)))
            t))
#+END_SRC

* Material 
** 怎样可以把问题表达的更清晰？
见链接：[[https://emacs.stackexchange.com/questions/19355/buffer-local-tangle-in-org-mode][a question about org-mode]]
* Todo 
** 更方便的为Emacs添加新功能
需要做到以下几件事情：
1. 建立一个目录 ~test~ , 加入 ~load-path~ 用于将要临时使用的package的代码放进去。
   因为我是纯手工管理包，所以我最终需要的只是干净的elisp文件，如果测试成功，会把代码加入到我的git仓库之中。
2.用 ~use-package~ 进行配置
** 更方便的书写snippet

** 我想要一个好用的terminal
现在配置emacs，不仅要配置emacs的字体啊， ~exec-path~ ，之类的，还要给terminal同样配置一遍，比如 ~PATH~ 啊什么的，很麻烦。

我能不能再emacs中使用terminal提供给我的功能呢？

我现在想到的候选者是eshell，至于emacs中的term，还完全不了解。

*** eshell 
资料： [[http://zhuoqiang.me/torture-emacs.html]]
资料： [[https://www.jianshu.com/p/a47a0bb66d5b][aweshell]]
资料： [[https://emacs-china.org/t/topic/5362]]

#+BEGIN_QUOTE
Back in the days, VT-like terminals were our main mean of communicating with a machine. Decades went by, our desktop computers can now handle gigabytes of buffering and display in 24-bit colors, and yet we still stick terminal emulators, that is, programs that emulate the restrictions of those ancient machines.
#+END_QUOTE

Terminals vs. shells
#+BEGIN_QUOTE
It's important to understand that shells are not (or should not be) semantically bound to terminal emulator restrictions. Shells are a textual interface to the machine. They just need input, evaluation, execution, output.
#+END_QUOTE

*** terminal和shell的区别
** 在windows下使用同一的文件分隔符
~cygwin-mount~ 是不是干这件事情的？
** font 
也许可以试试这个中英文混编字体？
链接： [[https://github.com/GitHubNull/YaHei-Consolas-Hybrid-1.12][YaHei-Consolas-Hybrid-1.12]]
等距更纱黑体也可以试试，据说中英文等高，而且两个英文字符宽度等于一个中文字符。
配置可以见： [[https://emacs-china.org/t/windows-emacs/7907/38]]

** 配置rust环境

** How to Summarize a Research Article 
[[http://web2.uconn.edu/ahking/How_to_Summarize_a_Research_Article.pdf]]
[[http://www.columbia.edu/cu/biology/ug/research/paper.html][WRITING A SCIENTIFIC RESEARCH ARTICLE]]

** package管理的方式
~straight~ 可以从github上直接获取。

地址： [[https://github.com/raxod502/straight.el]]
